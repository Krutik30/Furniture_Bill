/* eslint-disable @typescript-eslint/no-explicit-any */
import { Page, Text, View, Document, Image, StyleSheet } from '@react-pdf/renderer';
import { UserFormData } from '../user/UserPage';

const styles = StyleSheet.create({
    page: {
        padding: 20,
        fontSize: 10,
        backgroundColor: '#f7f7f7',
    },
    header: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 20,
        paddingBottom: 10,
        borderBottom: '2px solid #4A90E2',
    },
    logo: {
        width: 50,
        height: 50,
    },
    title: {
        fontSize: 24,
        color: '#4A90E2',
        fontWeight: 'bold',
    },
    metadata: {
        fontSize: 10,
        color: '#555',
    },
    headerRow: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingVertical: 8,
        paddingHorizontal: 10,
        borderBottom: '3px solid #000',
        fontSize: 13
    },
    productRow: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingVertical: 8,
        paddingHorizontal: 10,
        borderBottom: '1px solid #ddd',
    },
    productRowAlt: {
        backgroundColor: '#eaeaea',
    },
    productText: {
        fontSize: 10,
        color: '#333',
    },
});

const user: UserFormData = JSON.parse(localStorage.getItem('user') || '{}');

const PdfDocument = ({ formData }: any) => (
    <Document>
        <Page size="A4" style={styles.page}>
            {/* Header with Logo and Metadata */}
            <View style={styles.header}>
                <Image
                    src={user.image} // Placeholder for logo/image
                    style={styles.logo}
                />
                <View>
                    <Text style={styles.title}>{user.name}</Text>
                    <Text style={styles.metadata}>{user.email}</Text>
                    <Text style={styles.metadata}>{user.phone}</Text>
                    <Text style={styles.metadata}>{user.address}</Text>
                </View>
                <View>
                    <Text style={styles.metadata}>Date: {new Date().toLocaleDateString()}</Text>
                    <Text style={styles.metadata}>Generated by: Krutik</Text>
                </View>
            </View>

            {/* Products List */}
            <View>
                <View
                    style={[
                        styles.headerRow
                    ]}
                >
                    <Text style={styles.productText}>NAME</Text>
                    <Text style={styles.productText}>Length</Text>
                    <Text style={styles.productText}>Breath</Text>
                    <Text style={styles.productText}>Depth</Text>
                </View>
                {formData.type1.map((product: any, index: number) => {
                    console.log(formData)
                    return (
                        <View
                            key={index}
                            style={[
                                styles.productRow,
                                index % 2 === 0 ? styles.productRowAlt : {}, // Alternate row coloring
                            ]}
                        >
                            <Text style={styles.productText}>{product.name}</Text>
                            <Text style={styles.productText}>Length: {product.length}</Text>
                            <Text style={styles.productText}>Breadth: {product.breadth}</Text>
                            <Text style={styles.productText}>Depth: {product.depth}</Text>
                        </View>
                    )
                })}
            </View>
            <View break>
                <View
                    style={[
                        styles.headerRow
                    ]}
                >
                    <Text style={styles.productText}>NAME</Text>
                    <Text style={styles.productText}>Rate</Text>
                    <Text style={styles.productText}>Quality</Text>
                </View>
                {formData.type2.map((product: any, index: number) => (
                    <View
                        key={index}
                        style={[
                            styles.productRow,
                            index % 2 === 0 ? styles.productRowAlt : {}, // Alternate row coloring
                        ]}
                    >
                        <Text style={styles.productText}>{product.name}</Text>
                        <Text style={styles.productText}>Rate: {product.rate}</Text>
                        <Text style={styles.productText}>Quantity: {product.quantity}</Text>
                    </View>
                ))}
            </View>
        </Page>
    </Document>
);

export default PdfDocument;
